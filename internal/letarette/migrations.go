// Code generated by go-bindata.
// sources:
// migrations/1_init.down.sql
// migrations/1_init.up.sql
// DO NOT EDIT!

package letarette

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations1_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x28\x2e\x48\x4c\x4e\x2d\xb6\xe6\xe2\x42\x12\xcb\xcc\x2b\x49\x2d\x4a\x2d\x2e\x41\x17\x4d\x49\xad\xb0\xe6\x02\x04\x00\x00\xff\xff\x30\xf9\xb9\x2a\x3c\x00\x00\x00")

func migrations1_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initDownSql,
		"migrations/1_init.down.sql",
	)
}

func migrations1_initDownSql() (*asset, error) {
	bytes, err := migrations1_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_init.down.sql", size: 60, mode: os.FileMode(436), modTime: time.Unix(1568555670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x41\x73\xd3\x30\x10\x85\xef\xfe\x15\x3b\xe1\xe0\x64\xc6\x65\xe0\x00\x97\x92\x03\x43\x2e\xbd\x70\xe3\xdc\x51\xa5\x67\x77\x27\x8a\x64\xa4\x55\x9a\xf2\xeb\x19\x59\x76\xa0\xc5\x6e\x60\x98\x9e\xa4\x64\xb5\x6f\xbf\x7d\xbb\xd6\x01\x4a\x40\xa2\xee\x2c\x88\x5b\x72\x5e\x08\x27\x8e\x12\x29\xf6\x4a\x23\xae\x2b\x22\x2a\xf7\x9b\x1d\xb1\x13\x74\x08\xd4\x07\x3e\xa8\xf0\x48\x7b\x3c\x36\xbf\x1e\x90\xe0\x24\x83\x84\x4b\xd6\x52\x72\xfc\x3d\xa1\xa9\x86\x07\x57\x57\xc4\xce\xe0\x44\xbd\x8f\x2c\xec\x1d\x09\x1f\x10\x45\x1d\xfa\x21\x6e\x55\x94\x6f\xbd\x51\x02\xf3\x59\xbe\x2a\xe7\xe3\xb9\xd8\x24\xd8\x2c\x08\x19\xaf\xd3\x01\x4e\x6e\x76\xcf\x95\x76\x5e\xdf\xec\x9e\x51\x19\xb4\x2a\x59\xa1\xd5\xea\x77\x32\x41\x40\x14\xb2\x1c\x85\x06\x4f\x66\x08\x39\xca\x97\xc1\xae\x45\xc2\xb3\xf8\xbb\x51\x5b\xdf\x43\xef\x8b\x85\x0b\x4d\x7e\xda\xce\x08\x0f\x09\x9b\x6a\x73\x5d\x55\x2f\x0c\x68\xa2\x9e\x1f\xd1\x53\xd7\xcc\x9f\x4e\x8c\x83\x43\x38\xc2\x2c\x64\x95\x09\xae\x47\xe9\xa6\xa8\x6c\x86\x50\xeb\x03\xb8\x73\x79\x03\x68\x7a\xb0\xa1\x80\x16\x01\x4e\xe3\xbc\x3e\x53\xe8\x52\x33\xc6\xeb\x71\xd7\xd8\x5c\x58\xb3\x7f\x6f\x32\x15\xcf\x5f\x5a\x2b\x39\xc9\x6c\xe6\xeb\x38\x70\xe4\x20\x49\xd9\x59\x27\x5a\x89\x94\x22\xbb\x2e\xdf\x3e\xac\x27\xba\x86\xb4\x77\x02\x27\xdb\x3a\x7b\x55\x9f\x7f\xdf\x06\xff\xc0\x66\x5b\xb3\xa9\xc7\x56\xfc\x1e\x8e\x7f\x60\xbb\xea\x7d\x10\x84\xdc\x84\xf6\x06\x1f\xdf\x97\x90\xbe\x57\x21\x52\xfd\xa6\x5e\x3d\x19\x4a\xe0\x2e\xdb\x92\xc5\x6f\x15\x93\x6a\x73\x2a\xbb\x88\x20\x54\xbe\xb2\x48\x77\xe8\xd8\x95\x29\x95\x00\x3b\xf1\x99\x73\x3d\x40\x34\x19\x74\x43\x47\x65\x13\x22\xad\x1d\x1e\xde\xe6\x3f\xf3\x99\x03\xd7\x15\x9c\x59\xaa\x68\xc6\x8a\x06\x16\x82\xbf\xa8\xd8\x4a\x6c\x68\xae\x6c\x5d\x24\xea\x86\xbc\x35\x03\x40\x3e\x2f\x02\xa4\x11\xa0\x2c\xcb\x6b\x01\xfc\xa7\x77\x3f\x03\x00\x00\xff\xff\x87\x01\xe9\xa7\xb0\x05\x00\x00")

func migrations1_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initUpSql,
		"migrations/1_init.up.sql",
	)
}

func migrations1_initUpSql() (*asset, error) {
	bytes, err := migrations1_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_init.up.sql", size: 1456, mode: os.FileMode(436), modTime: time.Unix(1568581284, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/1_init.down.sql": migrations1_initDownSql,
	"migrations/1_init.up.sql": migrations1_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"1_init.down.sql": &bintree{migrations1_initDownSql, map[string]*bintree{}},
		"1_init.up.sql": &bintree{migrations1_initUpSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// migrations/1_init.down.sql
// migrations/1_init.up.sql
// DO NOT EDIT!

package letarette

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations1_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x28\x2e\x48\x4c\x4e\x2d\xb6\xe6\xe2\x42\x12\xcb\xcc\x2b\x49\x2d\x4a\x2d\x2e\x41\x17\x4d\x49\xad\xb0\xe6\x02\x04\x00\x00\xff\xff\x30\xf9\xb9\x2a\x3c\x00\x00\x00")

func migrations1_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initDownSql,
		"migrations/1_init.down.sql",
	)
}

func migrations1_initDownSql() (*asset, error) {
	bytes, err := migrations1_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_init.down.sql", size: 60, mode: os.FileMode(436), modTime: time.Unix(1568555670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\xb1\x72\xdb\x30\x0c\x86\x77\x3d\x05\xce\x1d\x64\xdd\x29\xbd\x76\x68\x97\xd4\x43\xaf\x5e\xbc\x74\xeb\x9c\x63\x48\x48\xc1\x99\x06\x55\x02\x4c\x9c\x3e\x7d\x8f\xa2\xe4\x36\xa9\x1c\xb7\xd7\xcb\x44\xda\x20\x7e\x7c\xf8\x01\xd9\x88\x46\x11\xd4\xdc\x7a\x04\xea\x80\x83\x02\x1e\x49\x54\x40\x06\x63\x51\xd6\x15\x00\x94\xfb\x6e\x0b\xc4\x8a\x3d\x46\x18\x22\x1d\x4c\x7c\x84\x3d\x3e\xb6\xbf\x1e\x80\xe2\x51\x47\x09\x4e\xde\x43\x62\xfa\x9e\xb0\xad\xc6\x07\x57\x57\x40\xec\xf0\x08\x43\x10\x52\x0a\x0c\x4a\x07\x14\x35\x87\x61\x8c\x7b\x23\xfa\x6d\x70\x46\xd1\x7d\xd6\xaf\x86\x83\x9c\x8a\xcd\x82\xed\x19\x21\x17\x6c\x3a\x20\xeb\x6e\xfb\x5c\x69\x1b\xec\x6e\xfb\x8c\xca\x61\x67\x92\x57\x58\xad\x7e\x27\x53\x8c\x28\x0a\x9e\x44\x61\xf4\x64\x81\x90\x44\xbf\x8c\x76\x9d\x25\x3c\x89\xbf\x9b\xb4\xed\x1d\xda\x7d\xb1\xf0\x4c\x93\x9f\x36\x0b\xc2\x63\x42\x53\x35\xd7\x55\xf5\xc2\x80\x66\xea\xe5\x11\x3d\x75\xcd\xfd\xe9\xc4\x34\x38\xcd\xf2\xcb\x49\x65\x80\xeb\x49\xb9\x2d\x22\xcd\x18\xea\x42\x44\xea\x39\x2f\x00\xcc\x0f\x1a\x88\xd8\x61\x44\xb6\x78\xda\x9e\x39\x74\xa9\x17\x17\xec\xb4\x6a\xe4\x2e\x6c\xd9\xbf\xf7\x98\x8a\xe5\x2f\x6d\x95\x1e\x75\x31\xf3\x75\x1c\xb8\xa7\xa8\xc9\xf8\x45\x27\x3a\x15\x48\x42\xdc\xe7\xdb\x87\xf5\x4c\xd7\x82\x0d\xac\xc8\xba\xa9\xb3\x57\xf5\xe9\xf7\x4d\x0c\x0f\xe4\x36\x35\xb9\x7a\x6a\x25\xec\x91\xe9\x07\x6e\x56\x43\x88\x8a\x31\x37\x61\x83\xc3\x8f\xef\x4b\xc8\xde\x99\x28\x50\xbf\xa9\x57\x4f\x86\x12\xa9\xcf\xb6\x64\xf1\x1b\x43\x60\xba\x9c\x4a\x2c\x18\x15\xca\x47\x26\x70\x8b\x3d\x71\x99\x52\x09\x10\x6b\xc8\x9c\xeb\x11\xa2\xcd\xa0\x0d\xdc\x1b\x9f\x50\x60\xcd\xf8\xf0\x36\xff\x99\xcf\x1c\xb8\xae\x90\xdd\xb9\x8a\x6e\xaa\xe8\xd0\xa3\xe2\x5f\x54\xec\x54\x5a\x58\x2a\x5b\x17\x89\xba\x85\xe0\xdd\x08\x90\xcf\x8b\x00\x69\x02\x28\xcb\xf2\x5a\x00\xff\xe9\xdd\xcf\x00\x00\x00\xff\xff\x97\x31\x2f\x06\xaf\x05\x00\x00")

func migrations1_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initUpSql,
		"migrations/1_init.up.sql",
	)
}

func migrations1_initUpSql() (*asset, error) {
	bytes, err := migrations1_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_init.up.sql", size: 1455, mode: os.FileMode(436), modTime: time.Unix(1569874825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/1_init.down.sql": migrations1_initDownSql,
	"migrations/1_init.up.sql": migrations1_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"1_init.down.sql": &bintree{migrations1_initDownSql, map[string]*bintree{}},
		"1_init.up.sql": &bintree{migrations1_initUpSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


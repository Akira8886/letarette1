// Code generated by go-bindata.
// sources:
// migrations/1_init.down.sql
// migrations/1_init.up.sql
// DO NOT EDIT!

package letarette

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations1_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x28\x2e\x48\x4c\x4e\x2d\xb6\xe6\xe2\x42\x12\xcb\xcc\x2b\x49\x2d\x4a\x2d\x2e\x41\x17\x4d\x49\xad\xb0\xe6\x02\x04\x00\x00\xff\xff\x30\xf9\xb9\x2a\x3c\x00\x00\x00")

func migrations1_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initDownSql,
		"migrations/1_init.down.sql",
	)
}

func migrations1_initDownSql() (*asset, error) {
	bytes, err := migrations1_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_init.down.sql", size: 60, mode: os.FileMode(436), modTime: time.Unix(1568542538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xb1\x72\xdb\x3a\x10\xec\xf9\x15\x37\x7e\x85\xad\x19\xba\x78\x45\xd2\x24\x2e\x32\x71\x0a\xd7\x9e\x7c\x00\x02\x2c\x45\x8c\x48\x80\xb9\x3b\x58\xb2\xbf\x3e\x03\x40\x24\x2d\x46\x71\x23\x71\xb0\x8b\xc5\xee\x61\x61\x19\x46\x41\x6a\x7e\x0d\x20\xdf\x51\x88\x4a\x38\x79\x51\x21\x99\x8c\x85\xdc\x35\x44\x54\xbf\x9f\x1e\xc9\x07\xc5\x1e\x4c\x13\xfb\xd1\xf0\x2b\x1d\xf0\xda\xae\x04\x52\x9c\xb4\x48\x84\x34\x0c\x94\x82\xff\x9d\xd0\x36\x85\x70\x7f\x4f\xea\x47\x88\x9a\x71\xa2\xd8\xd1\xb1\x07\x83\x8e\x20\xc3\x20\x1f\x48\xfb\xfc\xe7\x70\xa2\x34\xb9\x6c\x69\xe2\x68\x21\x52\x36\x0f\x46\xf4\x67\x5d\xce\x3f\x59\x68\x39\xa6\x9d\xe5\xb3\x37\x86\x28\x0d\x5e\x94\x4a\x30\x1f\xc3\x7a\x6a\x55\xf2\xa2\xdf\x4b\x66\xf7\x4d\x17\xb1\x45\x83\x4d\xd8\x23\xdb\xab\x26\x1c\x21\x28\x7b\x08\xc5\x70\xa9\xbf\x88\x55\x5b\xcf\x6a\x78\x2b\xb7\xa2\x3f\x82\xdb\x60\xb6\x4f\xe1\xf0\xec\xdf\xb0\x4c\xf4\xaf\x38\xb1\xeb\x04\x9a\xf1\x48\x2e\xda\x34\x22\xe4\x4b\xc9\x07\xf9\xb0\xa7\xa3\xd7\xbe\x0c\x4d\xcc\x88\x4d\xc8\xaa\x5e\x2c\x6d\xe5\x9b\x33\x01\xf6\x50\x6f\xf6\x5a\x8e\xaf\x0f\x9b\x39\x99\xe0\xae\x90\x73\xac\x8f\xa9\xeb\xb5\x6d\x79\x85\xb3\x6b\x76\x5f\x9a\xe6\x83\x0a\xce\x23\xbf\x5e\xc2\xcb\x91\xb9\x68\x9f\x1e\x2f\x1b\x78\xae\x26\xf8\x05\xee\x1f\xbb\x6a\x47\xef\xce\xd2\x6d\x55\xd9\x15\xa8\x8b\x0c\xbf\x0f\xb9\xe3\x34\x13\x76\xc4\xe8\xc0\x08\x16\xcb\x03\x99\xa1\xf7\x61\x5e\x3c\x6b\x32\xc3\xd5\x50\x2e\x5a\xa1\x24\xf9\x12\x3b\x95\x4f\x35\x9b\x9e\xb4\x5d\x02\xa6\x50\x5e\x02\xdc\xd9\xcf\xfb\x85\xb9\x98\xeb\x52\xdd\x1f\x0f\x08\xfe\x0d\x0f\x37\x53\x64\x05\x67\xdc\x46\x87\xcf\xff\x57\xc8\xf6\x86\x85\x6e\xff\xbb\xbd\xc9\x36\xff\x04\x00\x00\xff\xff\xbc\x0e\xa3\xa4\xf6\x03\x00\x00")

func migrations1_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initUpSql,
		"migrations/1_init.up.sql",
	)
}

func migrations1_initUpSql() (*asset, error) {
	bytes, err := migrations1_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_init.up.sql", size: 1014, mode: os.FileMode(436), modTime: time.Unix(1568542705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/1_init.down.sql": migrations1_initDownSql,
	"migrations/1_init.up.sql": migrations1_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"1_init.down.sql": &bintree{migrations1_initDownSql, map[string]*bintree{}},
		"1_init.up.sql": &bintree{migrations1_initUpSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

